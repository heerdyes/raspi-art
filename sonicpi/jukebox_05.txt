set :tu, 0.125
set :drm, 0
set :bas, 0
set :cho, 0
set :arp, 0
set :damp, 0.05
set :bamp, 0.05
set :camp, 0.05
set :aamp, 0.05

# all seq tracks must respect bar duration
bardur = get[:tu] * 16

# sonic sequence functions
define :drm0 do
  sample :drum_bass_hard,amp: get[:damp]
  sleep 4*get[:tu]
  sample :drum_snare_hard,amp: get[:damp]
  sleep 4*get[:tu]
  sample :drum_bass_soft,amp: get[:damp]
  sleep 4*get[:tu]
  sample :drum_snare_hard,amp: get[:damp]
  sleep 4*get[:tu]
end

define :drm0a do
  sample :drum_bass_hard,amp: get[:damp]
  sleep 4*get[:tu]
  sample :drum_snare_hard,amp: get[:damp]
  sleep 4*get[:tu]
  sample :drum_bass_hard,amp: get[:damp]
  sleep 2*get[:tu]
  sample :drum_snare_soft,amp: get[:damp]
  sleep 2*get[:tu]
  sample :drum_snare_hard,amp: get[:damp]
  sleep get[:tu]
  sample :drum_snare_hard,amp: get[:damp]
  sleep 2*get[:tu]
  sample :drum_snare_hard,amp: get[:damp]
  sleep get[:tu]
end

define :dbar0 do
  3.times do
    drm0
  end
  drm0a
end

define :drm1 do
  4.times do
    sample :drum_bass_soft,amp: get[:damp]
    4.times do
      sample :drum_cymbal_closed,amp: get[:damp]
      sleep get[:tu]
    end
  end
end

define :dbar1 do
  4.times do
    drm1
  end
end

define :bas0 do
  use_synth :fm
  b1=:C3
  b2=:Bb2
  play b1,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  play b2,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  play b2,release: get[:tu],amp: get[:bamp]
  sleep 2*get[:tu]
  sleep 8*get[:tu]
  play b2,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  play b2,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  sleep 2*get[:tu]
end

define :bas0a do
  use_synth :fm
  3.times do
    play :G2,release: get[:tu],amp: get[:bamp]
    sleep get[:tu]
  end
  sleep get[:tu]
  play :Bb2,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  play :Bb2,release: get[:tu],amp: get[:bamp]
  sleep 2*get[:tu]
  play :C3,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  sleep 4*get[:tu]
  play :D3,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  play :D3,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  play :F2,release: get[:tu],amp: get[:bamp]
  sleep 2*get[:tu]
end

define :bbar0 do
  3.times do
    bas0
  end
  bas0a
end

define :bas1 do
  use_synth :fm
  bn=:c3
  play bn,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  play bn,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  sleep 2*get[:tu]
  play bn,release: get[:tu],amp: get[:bamp]
  sleep 3*get[:tu]
  play bn,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  sleep 4*get[:tu]
  play bn,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  play bn,release: get[:tu],amp: get[:bamp]
  sleep get[:tu]
  sleep 2*get[:tu]
end

define :bbar1 do
  4.times do
    bas1
  end
end

define :cho0 do
  use_synth :blade
  play :C4,sustain: 2*get[:tu],release: 2*get[:tu],amp: get[:camp]
  play :Bb4,sustain: 2*get[:tu],release: 2*get[:tu],amp: get[:camp]
  sleep 8*get[:tu]
  play :C4,sustain: 2*get[:tu],release: 2*get[:tu],amp: get[:camp]
  play :G4,sustain: 2*get[:tu],release: 2*get[:tu],amp: get[:camp]
  sleep 8*get[:tu]
end

define :arp0 do
  use_synth :saw
  2.times do
    play :G3,release: 1*get[:tu],amp: get[:aamp]
    sleep 2*get[:tu]
    play :G3,release: 1*get[:tu],amp: get[:aamp]
    sleep 2*get[:tu]
    play :Bb3,release: 1*get[:tu],amp: get[:aamp]
    sleep 2*get[:tu]
    play :Bb3,release: 1*get[:tu],amp: get[:aamp]
    sleep 2*get[:tu]
  end
end

# trigger init functions
define :initdrm do |n,v|
  if n==36 then
    set :drm, 0
  elsif n==38 then
    set :drm, 1
  elsif n==40 then
    set :drm, 2
  elsif n==41 then
    set :drm, 3
  end
end

define :initbas do |n,v|
  if n==43 then
    set :bas, 0
  elsif n==45 then
    set :bas, 1
  elsif n==47 then
    set :bas, 2
  elsif n==48 then
    set :bas, 3
  end
end

define :initcho do |n,v|
  if n==50 then
    set :cho, 0
  elsif n==52 then
    set :cho, 1
  elsif n==53 then
    set :cho, 2
  elsif n==55 then
    set :cho, 3
  end
end

define :initarp do |n,v|
  if n==57 then
    set :arp, 0
  elsif n==59 then
    set :arp, 1
  elsif n==60 then
    set :arp, 2
  elsif n==62 then
    set :arp, 3
  end
end

# akai mpd monitor live loop
live_loop :mpdctrl do
  n,v = sync "/midi/mpd218_midi_1/1/1/note_on"
  # init sequencer triggers
  if [36,38,40,41].include? n then
    initdrm n,v
  elsif [43,45,47,48].include? n then
    initbas n,v
  elsif [50,52,53,55].include? n then
    initcho n,v
  elsif [57,59,60,62].include? n then
    initarp n,v
  end
end

live_loop :mpdknobs do
  kn,kv = sync "/midi/mpd218_midi_1/1/1/control_change"
  # handle volumes
  if kn==3 then
    set :damp, (kv / 127.0)
  elsif kn==9 then
    set :bamp, (kv / 127.0)
  elsif kn==12 then
    set :camp, (kv / 127.0)
  elsif kn==13 then
    set :aamp, (kv / 127.0)
  end
end

# live sequence loops
live_loop :drmseq do
  if get[:drm]==0 then
    dbar0
  elsif get[:drm]==1 then
    dbar1
  else
    sleep bardur
  end
end

live_loop :basseq do
  if get[:bas]==0 then
    bbar0
  elsif get[:bas]==1 then
    bbar1
  else
    sleep bardur
  end
end

live_loop :choseq do
  if get[:cho]==0 then
    cho0
  else
    sleep bardur
  end
end

live_loop :arpseq do
  if get[:arp]==0 then
    arp0
  else
    sleep bardur
  end
end
